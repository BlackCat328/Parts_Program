1.介绍一下标准的 CSS 的盒子模型？低版本 IE 的盒子模型有什么不同的？
相关知识点：
（1）有两种盒子模型：IE盒模型（border-box）、W3C标准盒模型（content-box）
（2）盒模型：分为内容（content）、填充（padding）、边界（margin）、边框（border）四个部分

IE盒模型和W3C标准盒模型的区别：
（1）W3C标准盒模型：属性width，height只包含内容content，不包含border和padding
（2）IE盒模型：属性width，height包含content、border和padding，指的是content + padding + border。
 
在ie8+浏览器中使用哪个盒模型可以由box-sizing（CSS新增的属性）控制，默认值为content-box，即标准盒模型；
如果将box-sizing设为border-box则用的是IE盒模型。如果在ie6，7，8中DOCTYPE缺失会将盒子模型解释为IE
盒子模型。若在页面中声明了DOCTYPE类型，所有的浏览器都会把盒模型解释为W3C盒模型。

回答：
    盒模型都是由四个部分组成的，分别是margin、border、padding和content。
    
    标准盒模型和IE盒模型的区别在于设置width和height时，所对应的范围不同。标准盒模型的width和height属性的
    范围只包含了content，而IE盒模型的width和height属性的范围包含了border、padding和content。
    
    一般来说，我们可以通过修改元素的box-sizing属性来改变元素的盒模型。

2.CSS 选择符有哪些？
（1）id选择器（#myid）
（2）类选择器（.myclassname）
（3）标签选择器（div,h1,p）
（4）后代选择器（h1 p）
（5）相邻后代选择器（子）选择器（ul>li）
（6）兄弟选择器（li~a）
（7）相邻兄弟选择器（li+a）
（8）属性选择器（a[rel="external"]）
（9）伪类选择器（a:hover,li:nth-child）
（10）伪元素选择器（::before、::after）
（11）通配符选择器（*）

3.::before 和:after 中双冒号和单冒号有什么区别？解释一下这 2 个伪元素的作用。
相关知识点：
    单冒号（:）用于CSS3伪类，双冒号（::）用于CSS3伪元素。（伪元素由双冒号和伪元素名称组成）
    双冒号是在当前规范中引入的，用于区分伪类和伪元素。不过浏览器需要同时支持旧的已经存在的伪元素写法，
    比如:first-line、:first-letter、:before、:after等，
    而新的在CSS3中引入的伪元素则不允许再支持旧的单冒号的写法。
    
    想让插入的内容出现在其它内容前，使用::before，否者，使用::after；
    在代码顺序上，::after生成的内容也比::before生成的内容靠后。
    如果按堆栈视角，::after生成的内容会在::before生成的内容之上。

回答：
    在css3中使用单冒号来表示伪类，用双冒号来表示伪元素。但是为了兼容已有的伪元素的写法，在一些浏览器中也可以使用单冒号
    来表示伪元素。
    
    伪类一般匹配的是元素的一些特殊状态，如hover、link等，而伪元素一般匹配的特殊的位置，比如after、before等。

4.伪类与伪元素的区别
    css引入伪类和伪元素概念是为了格式化文档树以外的信息。也就是说，伪类和伪元素是用来修饰不在文档树中的部分，比如，一句
    话中的第一个字母，或者是列表中的第一个元素。
    
    伪类用于当已有的元素处于某个状态时，为其添加对应的样式，这个状态是根据用户行为而动态变化的。比如说，当用户悬停在指定的
    元素时，我们可以通过:hover来描述这个元素的状态。
    
    伪元素用于创建一些不在文档树中的元素，并为其添加样式。它们允许我们为元素的某些部分设置样式。比如说，我们可以通过::be
    fore来在一个元素前增加一些文本，并为这些文本添加样式。虽然用户可以看到这些文本，但是这些文本实际上不在文档树中。
    
    有时你会发现伪元素使用了两个冒号（::）而不是一个冒号（:）。这是CSS3的一部分，并尝试区分伪类和伪元素。大多数浏览
    器都支持这两个值。按照规则应该使用（::）而不是（:），从而区分伪类和伪元素。但是，由于在旧版本的W3C规范并未对此进行
    特别区分，因此目前绝大多数的浏览器都支持使用这两种方式表示伪元素。

5.CSS 中哪些属性可以继承？
相关资料：
    每个CSS属性定义的概述都指出了这个属性是默认继承的，还是默认不继承的。这决定了当你没有为元素的属性指定值时该如何计算
    值。
    
    当元素的一个继承属性没有指定值时，则取父元素的同属性的计算值。只有文档根元素取该属性的概述中给定的初始值（这里的意思应
    该是在该属性本身的定义中的默认值）。
    
    当元素的一个非继承属性（在Mozillacode里有时称之为resetproperty）没有指定值时，则取属性的初始值initialv
    alue（该值在该属性的概述里被指定）。
    
    有继承性的属性：
    
    （1）字体系列属性
    font、font-family、font-weight、font-size、font-style、font-variant、font-stretch、font-size-adjust
    
    （2）文本系列属性
    text-indent、text-align、text-shadow、line-height、word-spacing、letter-spacing、
    text-transform、direction、color
    
    （3）表格布局属性
    caption-sideborder-collapseempty-cells
    
    （4）列表属性
    list-style-type、list-style-image、list-style-position、list-style
    
    （5）光标属性
    cursor
    
    （6）元素可见性
    visibility
    
    （7）还有一些不常用的；speak，page，设置嵌套引用的引号类型quotes等属性
    
    注意：当一个属性不是继承属性时，可以使用inherit关键字指定一个属性应从父元素继承它的值，inherit关键字用于显式地
    指定继承性，可用于任何继承性/非继承性属性。

回答：
    每一个属性在定义中都给出了这个属性是否具有继承性，一个具有继承性的属性会在没有指定值的时候，会使用父元素的同属性的值
    来作为自己的值。
    
    一般具有继承性的属性有，字体相关的属性，font-size和font-weight等。文本相关的属性，color和text-align等。
    表格的一些布局属性、列表属性如list-style等。还有光标属性cursor、元素可见性visibility。
    
    当一个属性不是继承属性的时候，我们也可以通过将它的值设置为inherit来使它从父元素那获取同名的属性值来继承。

6.如何居中 div？
    一般常见的几种居中的方法有：
    
    对于宽高固定的元素
    
    （1）我们可以利用margin:0auto来实现元素的水平居中。
    
    （2）利用绝对定位，设置四个方向的值都为0，并将margin设置为auto，由于宽高固定，因此对应方向实现平分，可以实现水
    平和垂直方向上的居中。
    
    （3）利用绝对定位，先将元素的左上角通过top:50%和left:50%定位到页面的中心，然后再通过margin负值来调整元素
    的中心点到页面的中心。
    
    （4）利用绝对定位，先将元素的左上角通过top:50%和left:50%定位到页面的中心，然后再通过translate来调整元素
    的中心点到页面的中心。
    
    （5）使用flex布局，通过align-items:center和justify-content:center设置容器的垂直和水平方向上为居中对
    齐，然后它的子元素也可以实现垂直和水平的居中。
    
    对于宽高不定的元素，上面的后面两种方法，可以实现元素的垂直和水平的居中。

7.display 有哪些值？说明他们的作用。
    block    块类型。默认宽度为父元素宽度，可设置宽高，换行显示。
    none    元素不显示，并从文档流中移除。
    inline    行内元素类型。默认宽度为内容宽度，不可设置宽高，同行显示。
    inline-block    默认宽度为内容宽度，可以设置宽高，同行显示。
    list-item    像块类型元素一样显示，并添加样式列表标记。
    run-in	此元素会根据上下文作为块级元素或内联元素显示。
    table    此元素会作为块级表格来显示。
        inline-table	此元素会作为内联表格来显示（类似 <table>），表格前后没有换行符。
        table-row-group	此元素会作为一个或多个行的分组来显示（类似 <tbody>）。
        table-header-group	此元素会作为一个或多个行的分组来显示（类似 <thead>）。
        table-footer-group	此元素会作为一个或多个行的分组来显示（类似 <tfoot>）。
        table-row	此元素会作为一个表格行显示（类似 <tr>）。
        table-column-group	此元素会作为一个或多个列的分组来显示（类似 <colgroup>）。
        table-column	此元素会作为一个单元格列显示（类似 <col>）
        table-cell	此元素会作为一个表格单元格显示（类似 <td> 和 <th>）
        table-caption	此元素会作为一个表格标题显示（类似 <caption>）
    inherit    规定应该从父元素继承display属性的值。

8.display:flex
    1).flex-direction：决定主轴的排列方向
        默认值：row，主轴水平方向，起点在左端
        row-reverse：主轴水平方向，起点在有右端
        column：主轴垂直方向，起点在上边沿
        column-reverse：主轴垂直方向，起点在下边沿

    2).flex-wrap：默认情况下，子元素都排列在一条轴线上，但有可能一条轴线排不下
        